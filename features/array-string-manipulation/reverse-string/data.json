{
  "examples": [
    {
      "input": "hello",
      "output": "Result: olleh"
    },
    {
      "input": "Hannah",
      "output": "Result: hannaH"
    },
    {
      "input": "A man, a plan, a canal: Panama",
      "output": "Result: amanaP :lanac a ,nalp a ,nam A"
    }
  ],
  "testCases": [
    {
      "input": "hello",
      "expected": "olleh",
      "description": "Basic case with lowercase letters"
    },
    {
      "input": "Hannah",
      "expected": "hannaH",
      "description": "Case with mixed case letters"
    },
    {
      "input": "A man, a plan, a canal: Panama",
      "expected": "amanaP :lanac a ,nalp a ,nam A",
      "description": "Sentence with punctuation"
    },
    {
      "input": "",
      "expected": "",
      "description": "Empty string"
    },
    {
      "input": "a",
      "expected": "a",
      "description": "Single character"
    },
    {
      "input": "12345",
      "expected": "54321",
      "description": "String of numbers"
    },
    {
      "input": "!@#$%",
      "expected": "%$#@!",
      "description": "Special characters"
    }
  ],
  "solutions": [
    {
      "id": "two-pointers",
      "label": "Two Pointers",
      "description": "Using two pointers to swap characters from both ends",
      "complexity": {
        "time": "O(n)",
        "space": "O(1)"
      },
      "howItWorks": [
        "Convert string to array of characters (since strings are immutable)",
        "Use two pointers: left starting at 0, right at end",
        "Swap characters at left and right positions",
        "Move left pointer right, right pointer left",
        "Continue until pointers meet in middle",
        "Join characters back into string"
      ],
      "advantages": [
        "In-place reversal (minimal extra space)",
        "Single pass through string",
        "Simple to understand and implement",
        "Optimal time complexity"
      ],
      "disadvantages": [
        "Requires converting string to array (in JavaScript)",
        "Not as concise as built-in methods"
      ],
      "jsCode": "function reverseString(s) {\n  const chars = s.split('');\n  let left = 0;\n  let right = chars.length - 1;\n  \n  while (left < right) {\n    // Swap characters\n    [chars[left], chars[right]] = [chars[right], chars[left]];\n    left++;\n    right--;\n  }\n  \n  return chars.join('');\n}",
      "tsCode": "function reverseString(s: string): string {\n  const chars = s.split('');\n  let left = 0;\n  let right = chars.length - 1;\n  \n  while (left < right) {\n    // Swap characters\n    [chars[left], chars[right]] = [chars[right], chars[left]];\n    left++;\n    right--;\n  }\n  \n  return chars.join('');\n}"
    },
    {
      "id": "built-in",
      "label": "Built-in Methods",
      "description": "Using JavaScript's built-in array methods",
      "complexity": {
        "time": "O(n)",
        "space": "O(n)"
      },
      "howItWorks": [
        "Split string into array of characters",
        "Reverse the array using built-in reverse()",
        "Join characters back into string"
      ],
      "advantages": [
        "Very concise and readable",
        "Uses optimized built-in methods",
        "Less prone to errors"
      ],
      "disadvantages": [
        "Creates new arrays (more space)",
        "Less control over the process",
        "May be slower for very large strings"
      ],
      "jsCode": "function reverseString(s) {\n  return s.split('').reverse().join('');\n}",
      "tsCode": "function reverseString(s: string): string {\n  return s.split('').reverse().join('');\n}"
    },
    {
      "id": "reduce",
      "label": "Reduce Method",
      "description": "Using array reduce to build reversed string",
      "complexity": {
        "time": "O(n)",
        "space": "O(n)"
      },
      "howItWorks": [
        "Convert string to array of characters",
        "Use reduce to build new string",
        "Add each character to beginning of accumulator"
      ],
      "advantages": [
        "Functional programming approach",
        "Can be modified for more complex reversals",
        "Good for learning reduce method"
      ],
      "disadvantages": [
        "Creates new string on each iteration",
        "Not as efficient as other methods",
        "More complex than necessary"
      ],
      "jsCode": "function reverseString(s) {\n  return s.split('').reduce((rev, char) => char + rev, '');\n}",
      "tsCode": "function reverseString(s: string): string {\n  return s.split('').reduce((rev, char) => char + rev, '');\n}"
    }
  ],
  "initialCode": "function reverseString(s) {\n  // Write your code here\n}"
}
